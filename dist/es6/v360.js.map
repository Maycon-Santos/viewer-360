{"version":3,"sources":["Object/merge.js","v360.js","appendCanvas.js","easingFunctions.js","preload.js","resizeCanvas.js","resizeImage.js","setImage.js","V360DOM.js","events/load.js","events/mousedown.js","events/mousemove.js","events/mouseup.js","events/resize.js","static/restart.js","static/set.js","static/start.js","static/stop.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"v360.js","sourcesContent":["Object.prototype.merge = function(object){\r\n    for (const key in object) this[key] = object[key];\r\n}","class V360{\r\n\r\n    constructor(){\r\n\r\n        const $v360 = document.querySelectorAll('[v360], [V360]');\r\n\r\n        for (let i = 0, l = $v360.length; i < l; i++)\r\n            this.init($v360[i]);\r\n\r\n        return 'teste';\r\n\r\n    }\r\n\r\n    init($target){\r\n\r\n        // If you are already a V360\r\n        if($target.v360 && $target.v360.played)\r\n            return $target.v360.restart();\r\n\r\n        const props = {\r\n\r\n            target: $target,\r\n\r\n            srcs: undefined,\r\n            sprite: undefined,\r\n            frames: 0,\r\n            dragSensitivity: 5,\r\n\r\n            canvas: this.appendCanvas($target),\r\n\r\n            imgs: [],\r\n            currentFrame: 0,\r\n\r\n            allowDrag: true,\r\n            mousePressing: undefined,\r\n            mouseStart: 0,\r\n\r\n            loadedImages: 0\r\n\r\n        };\r\n\r\n        // Replace all ' to \"\r\n        props.merge(JSON.parse($target.getAttribute('v360').replace(/\\'/g, '\"')));\r\n\r\n        this.preload(props);\r\n        this.onresize(props);\r\n\r\n        this.V360DOM($target, props);\r\n\r\n    }\r\n\r\n}\r\n\r\nwindow.addEventListener('load', () => window.v360 = new V360());","V360.prototype.appendCanvas = function($target){\r\n\r\n    let canvas = {};\r\n\r\n    canvas.target = document.createElement('canvas');\r\n    this.resizeCanvas($target, canvas.target);\r\n\r\n    canvas.ctx = canvas.target.getContext('2d');\r\n\r\n    $target.appendChild(canvas.target);\r\n\r\n    return canvas;\r\n\r\n}","/*  \r\n    * Github: https://gist.github.com/gre/1650294\r\n    * Easing Functions - inspired from http://gizma.com/easing/\r\n    * only considering the t value for the range [0, 1] => [0, 1]\r\n*/\r\nV360.prototype.easingFunctions = {\r\n    // no easing, no acceleration\r\n    linear: function (t) { return t },\r\n    // accelerating from zero velocity\r\n    easeInQuad: function (t) { return t*t },\r\n    // decelerating to zero velocity\r\n    easeOutQuad: function (t) { return t*(2-t) },\r\n    // acceleration until halfway, then deceleration\r\n    easeInOutQuad: function (t) { return t<.5 ? 2*t*t : -1+(4-2*t)*t },\r\n    // accelerating from zero velocity \r\n    easeInCubic: function (t) { return t*t*t },\r\n    // decelerating to zero velocity \r\n    easeOutCubic: function (t) { return (--t)*t*t+1 },\r\n    // acceleration until halfway, then deceleration \r\n    easeInOutCubic: function (t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 },\r\n    // accelerating from zero velocity \r\n    easeInQuart: function (t) { return t*t*t*t },\r\n    // decelerating to zero velocity \r\n    easeOutQuart: function (t) { return 1-(--t)*t*t*t },\r\n    // acceleration until halfway, then deceleration\r\n    easeInOutQuart: function (t) { return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t },\r\n    // accelerating from zero velocity\r\n    easeInQuint: function (t) { return t*t*t*t*t },\r\n    // decelerating to zero velocity\r\n    easeOutQuint: function (t) { return 1+(--t)*t*t*t*t },\r\n    // acceleration until halfway, then deceleration \r\n    easeInOutQuint: function (t) { return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t }\r\n}","V360.prototype.preload = function(props){\r\n\r\n    // Preload all images\r\n    for(let j = 1; j <= props.frames; j++){\r\n\r\n        // Insert and get img from the array\r\n        const img = props.imgs[props.imgs.push(new Image()) - 1];\r\n\r\n        img.onload = this.onload(props);\r\n\r\n        if(props.sprite){\r\n            img.src = props.sprite;\r\n            break;\r\n        }\r\n\r\n        img.src = props.srcs.replace('#{frame}', ('000' + j).slice(-3));\r\n\r\n    }\r\n\r\n}","V360.prototype.resizeCanvas = function($target, $canvas){\r\n\r\n    $canvas.width = $target.offsetWidth;\r\n    $canvas.height = $target.offsetHeight;\r\n\r\n}","V360.prototype.resizeImage = function(props){\r\n\r\n    const $canvas = props.canvas.target;\r\n    const imgs = props.imgs;\r\n    const sprite = !!props.sprite;\r\n    const frames = props.frames;\r\n\r\n    for(let i = 0, l = imgs.length; i < l; i++){\r\n\r\n        const $img = imgs[i];\r\n        \r\n        if($canvas.width <= $canvas.height){\r\n\r\n            if(sprite) $img.width = $img.width / frames;\r\n\r\n            $img.height = ($img.height * $canvas.width) / $img.width;\r\n            $img.width = $canvas.width;\r\n\r\n            if(sprite) $img.width = $img.width * frames;\r\n\r\n        }else{\r\n\r\n            if(sprite) $img.width = $img.width / frames;\r\n\r\n            $img.width = ($img.width * $canvas.height) / $img.height;\r\n            $img.height = $canvas.height;\r\n\r\n            if(sprite) $img.width = $img.width * frames;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","V360.prototype.setImage = function(props, n){\r\n\r\n    const $canvas = props.canvas.target;\r\n    const ctx = props.canvas.ctx;\r\n    const imgs = props.imgs;\r\n    const frames = props.frames;\r\n    const sprite = !!props.sprite;\r\n\r\n    const $img = imgs[sprite ? 0 : n];\r\n\r\n    ctx.clearRect(0, 0, $canvas.width, $canvas.height);\r\n\r\n    if(sprite){\r\n\r\n        const pos = -(($img.width / frames) * n);\r\n        const spriteWidth = $img.width / frames;\r\n\r\n        ctx.drawImage($img, pos, 0, $img.width, $img.height);\r\n\r\n        ctx.clearRect(spriteWidth, 0, $canvas.width - spriteWidth, $canvas.height);\r\n        \r\n    }else ctx.drawImage($img, 0, 0, $img.width, $img.height);\r\n\r\n}","V360.prototype.V360DOM = function($target, props){\r\n\r\n    const $canvas = props.canvas.target;\r\n    const frames = props.frames - 1;\r\n\r\n    // Handles\r\n    const mousedownHandle = this.onmousedown(props);\r\n    const mouseupHandle = this.onmouseup(props);\r\n    const mousemoveHandle = this.onmousemove(props);\r\n    const resizeHandle = this.onresize(props);    \r\n\r\n    $canvas.addEventListener('mousedown', mousedownHandle);\r\n    window.addEventListener('mouseup', mouseupHandle);\r\n    window.addEventListener('mousemove', mousemoveHandle);\r\n    window.addEventListener('resize', resizeHandle);\r\n\r\n    $target.v360 = { played: true };\r\n\r\n    $target.v360.start = () => {\r\n\r\n        this.init($target);\r\n\r\n        $target.v360.played = true;\r\n\r\n    }\r\n\r\n    $target.v360.stop = () => {\r\n\r\n        // Remove events\r\n        $canvas.removeEventListener('mousedown', mousedownHandle);\r\n        window.removeEventListener('mouseup', mouseupHandle);\r\n        window.removeEventListener('mousemove', mousemoveHandle);\r\n        window.removeEventListener('resize', resizeHandle);\r\n\r\n        // Remove canvas of the DOM\r\n        if($canvas) $canvas.remove();\r\n\r\n        $target.v360.played = false;\r\n\r\n    }\r\n\r\n    $target.v360.restart = () => {\r\n\r\n        $target.v360.stop();\r\n        $target.v360.start();\r\n\r\n    }\r\n\r\n    let stopAnimation;\r\n    $target.v360.animate = (to, duration, easingFunction = 'linear', callback) => {\r\n\r\n        let start = performance.now();\r\n        let progressed = 0;\r\n\r\n        props.allowDrag = false;\r\n\r\n        requestAnimationFrame(function animate(time){\r\n\r\n            let timeFraction = (time - start) / duration;\r\n        \r\n            // Calculate the current animation state\r\n            let progress = this.easingFunctions[easingFunction || 'linear'](timeFraction);\r\n        \r\n            if(to == Infinity || to == -Infinity){\r\n\r\n                if(~~timeFraction > progressed){\r\n                    progressed = ~~timeFraction;\r\n                    props.currentFrame += (to == Infinity) ? 1 : -1;\r\n                }\r\n\r\n            }else if(~~(progress * Math.abs(to)) > progressed){\r\n\r\n                progressed = ~~(progress * Math.abs(to));\r\n\r\n                let direction = to / Math.abs(to);\r\n                let nextFrame = props.currentFrame + ~~(progress * to);\r\n\r\n                props.currentFrame += nextFrame / Math.abs(nextFrame) * direction;\r\n\r\n                console.log(props.currentFrame);\r\n\r\n            }\r\n\r\n            if(props.currentFrame > frames) props.currentFrame = 0;\r\n            else if(props.currentFrame < 0) props.currentFrame = frames;\r\n\r\n            this.setImage(props, props.currentFrame);\r\n\r\n            if(stopAnimation) return props.allowDrag = !(stopAnimation = false);\r\n\r\n            if(to == Infinity) return requestAnimationFrame(animate.bind(this));\r\n\r\n            if(timeFraction < 1) return requestAnimationFrame(animate.bind(this));\r\n            else if(typeof callback == 'function')return callback();\r\n\r\n            // If you get here means the animation has come to an end\r\n            props.allowDrag = true;\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    $target.v360.stopAnimation = () => stopAnimation = true;\r\n\r\n}","V360.prototype.onload = function(props){\r\n\r\n    return e => {\r\n\r\n        props.loadedImages++;\r\n\r\n        if(props.loadedImages < props.frames && !props.sprite) return;\r\n\r\n        this.resizeImage(props);\r\n\r\n        this.setImage(props, props.currentFrame);\r\n\r\n        this.onmousedown(props);\r\n        this.onmouseup(props);\r\n        this.onmousemove(props);\r\n\r\n    }\r\n\r\n}","V360.prototype.onmousedown = function(props){\r\n\r\n    return e => {\r\n\r\n        if(!props.allowDrag) return;\r\n\r\n        props.mousePressing = true;\r\n        props.mouseStart = e.pageX;\r\n\r\n    }\r\n\r\n}","V360.prototype.onmousemove = function(props){\r\n\r\n    return e => {\r\n\r\n        e.preventDefault();\r\n\r\n        if(!props.mousePressing) return;\r\n\r\n        let mouseMoved = (props.mouseStart - e.pageX) / props.dragSensitivity;\r\n\r\n        if(mouseMoved > 1) mouseMoved = 1;\r\n        if(mouseMoved < -1) mouseMoved = -1;\r\n\r\n        if(mouseMoved == 1 || mouseMoved == -1){\r\n\r\n            props.mouseStart = e.pageX;\r\n\r\n            let roundMouseMoved = Math.round(mouseMoved);\r\n\r\n            props.currentFrame += roundMouseMoved / Math.abs(roundMouseMoved);\r\n\r\n            if(props.currentFrame > props.frames - 1) props.currentFrame = 0;\r\n            if(props.currentFrame < 0) props.currentFrame = props.frames - 1;\r\n\r\n            this.setImage(props, props.currentFrame);\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","V360.prototype.onmouseup = function(props){\r\n\r\n    return () => {\r\n\r\n        props.mousePressing = false;\r\n        props.mouseStart = 0;\r\n\r\n    }\r\n\r\n}","V360.prototype.onresize = function(props){\r\n\r\n    return () => {\r\n\r\n        const $target = props.target;\r\n        const $canvas = props.canvas.target;\r\n\r\n        if($canvas.width != $target.offsetWidth || $canvas.height != $target.height){\r\n\r\n            const currentFrame = props.currentFrame;\r\n\r\n            this.resizeCanvas($target, $canvas);\r\n            this.resizeImage(props);\r\n\r\n            this.setImage(props, currentFrame);\r\n            \r\n        }\r\n\r\n    }\r\n    \r\n}","V360.prototype.restart = function(){\r\n\r\n    const $v360 = document.querySelectorAll('[v360], [V360]');\r\n\r\n    for (let i = 0, l = $v360.length; i < l; i++)\r\n        $v360[i].v360.restart();\r\n\r\n}","V360.prototype.set = function($element, props){\r\n\r\n    $element.setAttribute('v360', JSON.stringify(props).replace(/\\\"/g, \"'\"));\r\n\r\n    this.init($element);\r\n\r\n}","V360.prototype.start = function(){\r\n\r\n    const $v360 = document.querySelectorAll('[v360], [V360]');\r\n\r\n    for (let i = 0, l = $v360.length; i < l; i++)\r\n        $v360[i].v360.start();\r\n\r\n}","V360.prototype.stop = function(){\r\n\r\n    const $v360 = document.querySelectorAll('[v360], [V360]');\r\n\r\n    for (let i = 0, l = $v360.length; i < l; i++)\r\n        $v360[i].v360.stop();\r\n\r\n}"]}